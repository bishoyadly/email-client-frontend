{"version":3,"sources":["Components/PicturesWall/PicturesWalls.module.scss","resources/email-image.png","App.module.scss","Components/EmailForm/EmailForm.module.scss","Apis.js","Components/PicturesWall/PicturesWall.js","Components/EmailForm/EmailForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axiosInstance","axios","create","baseURL","process","uploadFile","uploadedFile","formData","FormData","append","method","url","data","headers","removeUploadedFile","fileObj","fileName","name","delete","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","PicturesWall","useState","previewVisible","setPreviewVisible","previewImage","setPreviewImage","fileList","setFileList","handlePreview","PlusOutlined","className","a","preview","originFileObj","previewImageValue","uploadButton","pictureWallsStyles","uploadContainer","action","listType","onPreview","onChange","onRemove","visible","footer","onCancel","alt","style","width","src","Option","Select","TextArea","Input","layout","labelCol","span","wrapperCol","EmailForm","emailFormStyles","emailForm","initialValues","remember","onFinish","values","emailData","post","sendEmail","senders","reciepents","recipients","emailBody","onFinishFailed","errorInfo","console","log","Item","formItem","label","colon","rules","required","message","mode","placeholder","key","rows","uploadControl","mailFormSubmitButton","type","htmlType","App","appStyles","emailImage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0756c30d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"uploadContainer\":\"PicturesWalls_uploadContainer__ttEXU\",\"uploadButton\":\"PicturesWalls_uploadButton__3FqsJ\"};","module.exports = __webpack_public_path__ + \"static/media/email-image.0239bd87.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emailImage\":\"App_emailImage__2mq1D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emailForm\":\"EmailForm_emailForm__1EeVT\",\"formItem\":\"EmailForm_formItem__2_wbd\",\"mailFormSubmitButton\":\"EmailForm_mailFormSubmitButton__23PYf\",\"uploadControl\":\"EmailForm_uploadControl__5Sv7v\"};","import axios from 'axios';\n\nconst axiosInstance = axios.create({\n    baseURL: process.env.REACT_APP_BACKEND_URL\n});\n\nexport function uploadFile(uploadedFile) {\n    const formData = new FormData();\n    formData.append('file', uploadedFile);\n    return axiosInstance({\n        method: 'POST',\n        url: `${process.env.REACT_APP_BACKEND_URL}/attachment-file`,\n        data: formData,\n        headers: {\n            'content-type': `multipart/form-data`,\n        },\n    });\n}\n\nexport function removeUploadedFile(fileObj) {\n    const fileName = fileObj.name;\n    axiosInstance.delete(`/attachment-file?fileName=${fileName}`);\n}\n\nexport function sendEmail(emailData) {\n    axiosInstance.post('/send-mail', emailData);\n}","import React, {useState} from 'react';\nimport {Upload, Modal, message} from 'antd';\nimport {PlusOutlined} from '@ant-design/icons';\nimport pictureWallsStyles from './PicturesWalls.module.scss';\nimport {uploadFile,removeUploadedFile} from '../../Apis';\n\nfunction getBase64(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = error => reject(error);\n    });\n}\n\nexport default function PicturesWall() {\n    const [previewVisible, setPreviewVisible] = useState(false);\n    const [previewImage, setPreviewImage] = useState('');\n\n\n    const state = {\n        previewVisible: false,\n        previewImage: '',\n        fileList: [\n            {\n                uid: '-1',\n                name: 'image.png',\n                status: 'done',\n                url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n            }\n        ],\n    };\n\n    const [fileList, setFileList] = useState([]);\n    const uploadButton1 = (\n        <div>\n            <PlusOutlined/>\n            <div className=\"ant-upload-text\">Upload</div>\n        </div>\n    );\n\n\n    const handleCancel = () => setPreviewVisible(false);\n\n    const handlePreview = async file => {\n        if (!file.url && !file.preview) {\n            file.preview = await getBase64(file.originFileObj);\n        }\n        const previewImageValue = file.url || file.preview;\n        setPreviewImage(previewImageValue);\n        setPreviewVisible(true);\n    };\n\n    const handleChange = ({fileList}) => setFileList(fileList);\n\n    const uploadButton = (\n        <div>\n            <PlusOutlined/>\n            <div className=\"ant-upload-text\">Upload</div>\n        </div>\n    );\n\n    return (\n        <div className={pictureWallsStyles.uploadContainer}>\n            <Upload\n                className={pictureWallsStyles.uploadButton}\n                action={uploadFile}\n                listType=\"picture-card\"\n                fileList={fileList}\n                onPreview={handlePreview}\n                onChange={handleChange}\n                onRemove={removeUploadedFile}\n            >\n                {uploadButton}\n            </Upload>\n            <Modal visible={previewVisible} footer={null} onCancel={handleCancel}>\n                <img alt=\"example\" style={{width: '100%'}} src={previewImage}/>\n            </Modal>\n        </div>\n    );\n}","import React from 'react';\nimport {Form, Input, Button, Select} from 'antd';\nimport emailFormStyles from './EmailForm.module.scss';\nimport PicturesWall from '../PicturesWall/PicturesWall';\nimport './EmailForm.scss';\nimport {sendEmail} from '../../Apis';\n\nconst {Option} = Select;\nconst {TextArea} = Input;\nconst layout = {\n    labelCol: {\n        span: 8,\n    },\n    wrapperCol: {\n        span: 16,\n    },\n};\n\nexport default function EmailForm() {\n\n    const onFinish = values => {\n        const emailData = {\n            senders: values.senders,\n            reciepents: values.recipients,\n            emailBody: values.emailBody\n        };\n        sendEmail(emailData);\n    };\n\n    const onFinishFailed = errorInfo => {\n        console.log('Failed:', errorInfo);\n    };\n\n    return (\n        <Form\n            {...layout}\n            className={`email-form ${emailFormStyles.emailForm}`}\n            name=\"basic\"\n            initialValues={{\n                remember: true,\n            }}\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n        >\n            <Form.Item\n                className={emailFormStyles.formItem}\n                label=\"From\"\n                colon={false}\n                name=\"senders\"\n                labelCol={{'span': 0, 'offset': 4}}\n                rules={[\n                    {\n                        required: true,\n                        message: 'Please at least one sender mail',\n                    },\n                ]}\n            >\n                <Select\n                    className={'email-form-control'}\n                    mode=\"tags\"\n                    placeholder=\"Senders mails ex. test@example.com\"\n                >\n                    <Option key={\"bishoy@gmail.com\"}> bishoy@gmail.com </Option>\n                </Select>\n            </Form.Item>\n\n\n            <Form.Item\n                className={emailFormStyles.formItem}\n                label=\"To\"\n                colon={false}\n                name=\"recipients\"\n                labelCol={{'span': 0, 'offset': 4}}\n                rules={[\n                    {\n                        required: true,\n                        message: 'Please at least one Recipient mail',\n                    },\n                ]}\n            >\n                <Select\n                    className={'email-form-control'}\n                    mode=\"tags\"\n                    placeholder=\"Recipients mails ex. test@example.com\"\n                >\n                    <Option key={\"bishoy@gmail.com\"}> bishoy@gmail.com </Option>\n                </Select>\n            </Form.Item>\n\n\n            <Form.Item\n                className={emailFormStyles.formItem}\n                label=\"Body\"\n                colon={false}\n                name=\"emailBody\"\n                labelCol={{'span': 0, 'offset': 4}}\n                rules={[\n                    {\n                        required: false\n                    },\n                ]}\n            >\n                <TextArea\n                    className={'email-form-control'}\n                    placeholder={'Email body'}\n                    rows={8}>\n                </TextArea>\n            </Form.Item>\n\n\n            <Form.Item\n                className={emailFormStyles.formItem}\n                label=\"Attachment\"\n                colon={false}\n                name=\"Attachment\"\n            >\n                <div className={emailFormStyles.uploadControl}>\n                    <PicturesWall/>\n                </div>\n            </Form.Item>\n\n            <Form.Item\n                className={emailFormStyles.mailFormSubmitButton}\n            >\n                <Button\n                    className={emailFormStyles.mailFormSubmitButton}\n                    type=\"primary\"\n                    htmlType=\"submit\">\n                    Send\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n}","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport EmailForm from \"./Components/EmailForm/EmailForm\";\nimport emailImage from './resources/email-image.png';\nimport appStyles from './App.module.scss';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <img\n                    className={`data-tilt ${appStyles.emailImage}`}\n                    src={emailImage}\n                />\n                <EmailForm/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}